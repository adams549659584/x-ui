name: Release X-ui
on:
  push:
    tags:
      - 0.*
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GAYHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
  linuxamd64build:
    name: build x-ui amd64 version
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: build linux amd64 version
        run: |
          sudo apt-get update
          sudo apt install -y
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -trimpath --ldflags '-extldflags "-static"' -o xui-release -v main.go
          mkdir x-ui
          cp xui-release x-ui/xui-release
          cp x-ui.service x-ui/x-ui.service
          cp x-ui.sh x-ui/x-ui.sh
          cd x-ui
          mv xui-release x-ui
          mkdir bin
          cd bin
          wget https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          unzip Xray-linux-64.zip
          rm -f Xray-linux-64.zip geoip.dat geosite.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
          mv xray xray-linux-amd64
          cd ..
          cd ..
      - name: package
        run: tar -zcvf x-ui-linux-amd64.tar.gz x-ui
      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GAYHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: x-ui-linux-amd64.tar.gz
          asset_name: x-ui-linux-amd64.tar.gz
          asset_content_type: application/gzip
  linuxarm64build:
    name: build x-ui arm64 version
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: build linux arm64 version
        run: |
          sudo apt-get update
          sudo apt install gcc-aarch64-linux-gnu -y
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -trimpath --ldflags '-extldflags "-static"' -o xui-release -v main.go
          mkdir x-ui
          cp xui-release x-ui/xui-release
          cp x-ui.service x-ui/x-ui.service
          cp x-ui.sh x-ui/x-ui.sh
          cd x-ui
          mv xui-release x-ui
          mkdir bin
          cd bin
          wget https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-arm64-v8a.zip
          unzip Xray-linux-arm64-v8a.zip
          rm -f Xray-linux-arm64-v8a.zip geoip.dat geosite.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
          mv xray xray-linux-arm64
          cd ..
          cd ..
      - name: package
        run: tar -zcvf x-ui-linux-arm64.tar.gz x-ui
      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GAYHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: x-ui-linux-arm64.tar.gz
          asset_name: x-ui-linux-arm64.tar.gz
          asset_content_type: application/gzip
  linuxs390xbuild:
    name: build x-ui s390x version
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: build linux s390x version
        run: |
          sudo apt-get update
          sudo apt install gcc-s390x-linux-gnu -y
          CGO_ENABLED=1 GOOS=linux GOARCH=s390x CC=s390x-linux-gnu-gcc go build -trimpath --ldflags '-extldflags "-static"' -o xui-release -v main.go
          mkdir x-ui
          cp xui-release x-ui/xui-release
          cp x-ui.service x-ui/x-ui.service
          cp x-ui.sh x-ui/x-ui.sh
          cd x-ui
          mv xui-release x-ui
          mkdir bin
          cd bin
          wget https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-s390x.zip
          unzip Xray-linux-s390x.zip
          rm -f Xray-linux-s390x.zip geoip.dat geosite.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
          wget https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
          mv xray xray-linux-s390x
          cd ..
          cd ..
      - name: package
        run: tar -zcvf x-ui-linux-s390x.tar.gz x-ui
      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GAYHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: x-ui-linux-s390x.tar.gz
          asset_name: x-ui-linux-s390x.tar.gz
          asset_content_type: application/gzip

  docker-build:
    name: build x-ui docker images
    needs: [linuxamd64build, linuxarm64build, linuxs390xbuild]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Shanghai

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GAYHUB_TOKEN }}        

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          build-args: |
            REPO_USER=${{ github.repository_owner }}
            X_UI_VERSION=${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64,linux/s390x
          context: .
          file: ./docker/Dockerfile.alpine  
          push: true
          tags: |
            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/x-ui:${{ github.ref_name }}
            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/x-ui:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/x-ui:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/x-ui:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/x-ui:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/x-ui:cache,mode=max    